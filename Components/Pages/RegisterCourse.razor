@page "/RegisterCourse/{selectedID:int}"
@rendermode InteractiveServer
@inject IConfiguration Config  

<PageTitle>Register Course</PageTitle>
<RegistrarTitle>Register Courses for @studentName @selectedID</RegistrarTitle>
<h4 class="mt-3 mb-3">Course list:</h4>

<EditForm Model="@courses" OnValidSubmit="HandleValidSubmit">
    <ul class="list-group text-start mb-3">
        @foreach (var course in courses)
        {
            <div class="form-check">
                <input class="form-check-input" type="checkbox" @bind="course.isEnrolled">
                <label class="form-check-label" for="@course.Code">
                    @course.Code - @course.Title - @course.WeeklyHours Hours per week
                </label>
            </div>
        }
    </ul>
    <div class ="justify-content align-center">
        <button type="submit" class="btn btn-primary">Confirm Registration</button>
        <div class="btn btn-primary text-center m-0">
            <span><a class="text-light text-decoration-none" href="/">Cancel</a></span>
        </div>
    </div>
</EditForm>


@code {
    [Parameter] public int selectedID { get; set; } // Read this from page URL
    [Parameter] public string? studentName { get; set; }

    public List<Course> courses = new List<Course>(); // Initialize the list
    public List<int> registeredCourses = new List<int>(); // ID of registered courses for the matching student 
    private string? connectionString;

    protected override async Task OnInitializedAsync()
    {
        await ShowStudent();
        await LoadCourseList();
    }

    private async Task ShowStudent()
    {
        connectionString = Config.GetConnectionString("default");
        using (var conn = new MySqlConnection(connectionString))
        {
            var studentTable = "SELECT * FROM Registrar.Student"; // SQL query
            var students = (await conn.QueryAsync<Registrar.Student>(studentTable)).ToList();
            var student = students.FirstOrDefault(s => s.Id == selectedID);
            if (student != null)
            {
                studentName = student.FirstName + " " + student.LastName;
            }
        }
    }

    private async Task LoadCourseList()
    {
        connectionString = Config.GetConnectionString("default");
        using (var conn = new MySqlConnection(connectionString))
        {
            // Retrieve and render a list of registered course IDs
            var registrationTable = "SELECT * FROM Registrar.Registration";
            var registrations = (await conn.QueryAsync<Registrar.Registration>(registrationTable)).ToList();
            registeredCourses = registrations.Where(r => r.StudentId == selectedID).Select(r => r.CourseId).ToList();

            // Retrieve and render info of registered courses
            var courseTable = "SELECT * FROM Registrar.Course"; // SQL query
            var coursesData = (await conn.QueryAsync<Registrar.Course>(courseTable)).ToList();
            courses.Clear();
            foreach (var c in coursesData)
            {
                var oneCourse = new Course
                {
                    Id = c.Id,
                    Code = c.Code,
                    Title = c.Title,
                    WeeklyHours = c.WeeklyHours,
                    isEnrolled = registeredCourses.Contains(c.Id)
                };
                courses.Add(oneCourse);
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        registeredCourses.Clear();
        foreach (var c in courses)
        {
            if (c.isEnrolled)
            {
                registeredCourses.Add(c.Id);
            }
        }

        connectionString = Config.GetConnectionString("default");
        using (var conn = new MySqlConnection(connectionString))
        {
            // Clear registration table
            var cmdDel = "DELETE FROM Registrar.Registration WHERE StudentId = @StudentId";
            await conn.ExecuteAsync(cmdDel, new { StudentId = selectedID });

            // Repopulate registration table
            foreach (var c in registeredCourses)
            {
                var cmdInsert = "INSERT INTO Registrar.Registration (StudentId, CourseId) VALUES (@StudentId, @CourseId)";
                int success = await conn.ExecuteAsync(cmdInsert, new { StudentId = selectedID, CourseId = c });
                if (success > 0)
                {
                    Console.WriteLine("Insertion success");
                }
            }
        }

        // Reload course list after registration update
        await LoadCourseList();
    }
}
